//
// collapse_ngrams-Release.xcconfig
//
// Generated by BuildSettingExtractor on 3/22/15
// https://github.com/dempseyatgithub/BuildSettingExtractor
//

#include "collapse_ngrams-Shared.xcconfig"


// Optimization Level
// 
// None: Do not optimize. [-O0]
// 
// With this setting, the compiler's goal is to reduce the cost of compilation and to
// make debugging produce the expected results.  Statements are independent: if you stop
// the program with a breakpoint between statements, you can then assign a new value to
// any variable or change the program counter to any other statement in the function and
// get exactly the results you would expect from the source code.
// 
// Fast: Optimizing compilation takes somewhat more time, and a lot more memory for a
// large function. [-O, -O1]
// 
// With this setting, the compiler tries to reduce code size and execution time, without
// performing any optimizations that take a great deal of compilation time. In Apple's
// compiler, strict aliasing, block reordering, and inter-block scheduling are disabled
// by default when optimizing.
// 
// Faster: The compiler performs nearly all supported optimizations that do not involve a
// space-speed tradeoff. [-O2]
// 
// With this setting, the compiler does not perform loop unrolling or function inlining,
// or register renaming.  As compared to the 'Fast' setting, this setting increases both
// compilation time and the performance of the generated code.
// 
// Fastest: Turns on all optimizations specified by the 'Faster' setting and also turns
// on function inlining and register renaming options. This setting may result in a
// larger binary. [-O3]
// 
// Fastest, Smallest: Optimize for size.  This setting enables all 'Faster' optimizations
// that do not typically increase code size.  It also performs further optimizations
// designed to reduce code size. [-Os]
// 
// Fastest, Aggressive Optimizations: This setting enables 'Fastest' but also enables
// aggressive optimizations that may break strict standards compliance but should work
// well on well-behaved code.  [-Ofast]

GCC_OPTIMIZATION_LEVEL = fast